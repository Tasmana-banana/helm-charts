{{ template "chart.header" . }}
{{ template "chart.description" . }}

## TL;DR;

```console
helm repo add christianhuth https://charts.christianhuth.de
helm repo update
helm install my-release christianhuth/freshrss
```

## Introduction

FreshRSS is a self-hosted RSS and Atom feed aggregator.

This chart bootstraps [FreshRSS](https://freshrss.org) on a [Kubernetes](http://kubernetes.io) cluster using the [Helm](https://helm.sh) package manager.

## Prerequisites

- Kubernetes 1.19+

## Installing the Chart

To install the chart with the release name `my-release`:

```console
helm repo add christianhuth https://charts.christianhuth.de
helm repo update
helm install my-release christianhuth/freshrss
```

These commands deploy FreshRSS on the Kubernetes cluster in the default configuration. The [Values](#values) section lists the values that can be configured during installation.

> **Tip**: List all releases using `helm list`

## Uninstalling the Chart

To uninstall the `my-release` deployment:

```console
helm uninstall my-release
```

The command removes all the Kubernetes components associated with the chart and deletes the release.

{{ template "chart.valuesSection" . }}

Specify each parameter using the `--set key=value[,key=value]` argument to `helm install`.

Alternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example,

```console
helm install my-release -f values.yaml christianhuth/freshrss
```

## Initialization

This Chart can initialize FreshRSS on the first installation using the attribute `freshrss.initialization.enabled`, which defaults to `true`.
The initialization will configure the database connection and create the admin user for you.

This approach however has two downsides:

  1. Confidential information like admin and database password have to be added to the environment variables `FRESHRSS_INSTALL` and `FRESHRSS_USER` of the Container
  2. Therefore you have to define these passwords using the attributes `freshrss.initialization.admin.apiPassword`, `freshrss.initialization.admin.password`, `postgresql.auth.password` or `externalPostgresql.auth.password` and cannot use existing Kubernetes Secrets to define these values like you would in a GitOps based setup

Make sure to set `freshrss.initialization.enabled=false` after the initialization has finished to remove the environment variables `FRESHRSS_INSTALL` and `FRESHRSS_USER` containing the confidential information again.

The Logs should contain something like the following:

```console
FreshRSS install…
ℹ️ Remember to create the default user: huthcn   ./cli/create-user.php --user huthcn --password 'password' --more-options
ℹ️ Remember to re-apply the appropriate access rights, such as:  sudo cli/access-permissions.sh
✅ FreshRSS successfully installed.
FreshRSS creating user “huthcn”…
FreshRSS[31]: FreshRSS Favicon GET https://github.com/FreshRSS/FreshRSS/
FreshRSS[31]: FreshRSS Favicon GET https://github.githubassets.com/favicons/favicon.svg
ℹ️ Remember to refresh the feeds of the user: huthcn     ./cli/actualize-user.php --user huthcn
ℹ️ Remember to re-apply the appropriate access rights, such as:  sudo cli/access-permissions.sh
✅ FreshRSS user successfully created.
```

You can of course set `freshrss.initialization.enabled=false` right away and initialize FreshRSS yourself using the Web UI.
